<map id="clang::interp::VariableScope&lt; Emitter &gt;" name="clang::interp::VariableScope&lt; Emitter &gt;">
<area shape="rect" id="node1" title="Scope chain managing the variable lifetimes." alt="" coords="96,5,299,47"/>
<area shape="rect" id="node2" href="$classclang_1_1interp_1_1DeclScope.html" title="Scope used to handle temporaries in toplevel variable declarations." alt="" coords="5,95,184,136"/>
<area shape="rect" id="node3" href="$classclang_1_1interp_1_1LocalScope.html" title="Generic scope for local variables." alt="" coords="208,95,392,136"/>
<area shape="rect" id="node4" href="$classclang_1_1interp_1_1AutoScope.html" title="Like a regular LocalScope, except that the destructors of all local variables are automatically emitt..." alt="" coords="210,184,390,225"/>
<area shape="rect" id="node5" href="$classclang_1_1interp_1_1BlockScope.html" title="Scope for storage declared in a compound statement." alt="" coords="104,273,291,315"/>
<area shape="rect" id="node6" href="$classclang_1_1interp_1_1ExprScope.html" title="Expression scope which tracks potentially lifetime extended temporaries which are hoisted to the pare..." alt="" coords="315,273,493,315"/>
</map>
